// Fixed-point combinator (Y-combinator) for recursion
const Y = λ recursive. (
    λ x. (x x)
    (λ self_apply. (recursive (self_apply self_apply))) // faster: node `(recursive (self_apply self_apply))` has 2 referenses now
)


// Lists Church encoding
const empty_list = false

const list_cons = λ head_value tail selector default. (
    selector head_value (tail selector default)
)
const list_fold = λ reducer initial_acc lst. (
    lst
        (λ head tail_acc. (reducer head tail_acc))
        initial_acc
)

const list_head = λ lst. (lst true empty_list)

const list_tail = λ lst. (
    list_fold
        false
        empty_list
        lst
)



const list_map = λ transform lst. (
    list_fold
        (λ head tail. (list_cons (transform head) tail))
        empty_list
        lst
)

const list_filter = λ predicate lst. (
    list_fold
        (λ head tail. (
            (predicate head)
                (list_cons head tail)
                tail
        ))
        empty_list
        lst
)

const list_concat = λ list1 list2. (
    list_fold list_cons list2 list1
)


// Helpers
// Carryed `+` (primitives doesnt works like usual abstractions)
const list_sum = λ lst. (
    list_fold (λ x y. (+ x y)) 0 lst
)

// Inclusive
const list_range = (Y
    (λ recursive bottom top. ( 
            (= bottom top)
                (list_cons bottom empty_list)
                (list_cons bottom (recursive (+ bottom 1) top))
        )
    )
)

const not = λ val. (val false true)
const sample_list = (list_range 0 10)
const main = (
    list_sum (list_filter (λ x. (not (= x 100))) (list_map (λ x. (* x x)) (list_concat sample_list sample_list)))
    // 570
)
